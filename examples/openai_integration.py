"""Example showing how to use Raggiro with OpenAI integration."""

import os
from pathlib import Path
from raggiro.processor import DocumentProcessor
from raggiro.rag.pipeline import RagPipeline
from raggiro.utils.config import load_config

# Load default configuration
config = load_config()

# Override with OpenAI configuration
config["llm"] = {
    "provider": "openai",
    "api_key": os.environ.get("OPENAI_API_KEY", ""),  # Get API key from environment variable
    "openai_model": "gpt-3.5-turbo",
}

# Configure rewriting to use OpenAI
config["rewriting"] = {
    "enabled": True,
    "llm_type": "openai",
    "openai_model": "gpt-3.5-turbo",
    "temperature": 0.1,
    "max_tokens": 200,
}

# Configure generation to use OpenAI
config["generation"] = {
    "llm_type": "openai",
    "openai_model": "gpt-3.5-turbo",
    "temperature": 0.1,
    "max_tokens": 1000,
}

# Directories for our example
input_dir = "examples/documents"
output_dir = "output"
index_dir = "index"

# Create output directories
os.makedirs(output_dir, exist_ok=True)
os.makedirs(index_dir, exist_ok=True)

def main():
    """Run the example."""
    if not config["llm"]["api_key"]:
        print("Error: OpenAI API key not set. Set the OPENAI_API_KEY environment variable.")
        return
    
    # Process documents
    print("Processing documents with OpenAI integration...")
    processor = DocumentProcessor(config)
    
    # Process a sample document
    sample_path = Path("examples/documents/sample_report.pdf")
    
    if not sample_path.exists():
        print(f"Error: Sample document not found at {sample_path}")
        return
    
    result = processor.process_file(sample_path, output_dir)
    
    if not result["success"]:
        print(f"Error processing document: {result.get('error', 'Unknown error')}")
        return
    
    print(f"Document processed successfully")
    
    # Set up RAG pipeline
    print("\nSetting up RAG pipeline with OpenAI...")
    pipeline = RagPipeline(config)
    
    # Add document to the index
    pipeline.indexer.index_documents([result["document"]])
    
    # Query the pipeline
    print("\nQuerying the pipeline with OpenAI integration...")
    query = "What is the main topic of this document?"
    result = pipeline.query(query)
    
    if result["success"]:
        print("\nOriginal query:")
        print(query)
        
        if "rewritten_query" in result:
            print("\nRewritten query (using OpenAI):")
            print(result["rewritten_query"])
        
        print("\nResponse (generated by OpenAI):")
        print(result["response"])
    else:
        print(f"Query failed: {result.get('error', 'Unknown error')}")

if __name__ == "__main__":
    main()